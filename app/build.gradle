//表明这是一个application
apply plugin: 'com.android.application'

android {

    //配置签名设置，标记App唯一性、保护App
    signingConfigs {
        release {
            //签名证书中密钥别名
            keyAlias 'android'

            //签名证书中该密钥的密码
            keyPassword '87983367ok'

            //签名证书文件
            storeFile file('../androidSignStore.jks')

            //签名证书文件的密码
            storePassword '87983367ok'
        }
    }

    //编译Android工程的SDK版本
    compileSdkVersion 29

    //用于定义所有的默认配置
    defaultConfig {

        //指定App包名
        applicationId project.APP_PACKAGE_NAME

        //指定sdk最低支持的Android SDK
        minSdkVersion 21

        //指定基于的Android SDK
        targetSdkVersion 29

        //配置Android App 的内部版本
        versionCode Integer.parseInt(project.APP_VERSION_CODE)

        //配置Android App 的版本名称
        versionName project.APP_VERSION_NAME

        //配置单元测试使用的Runner，默认为android.test.InstrumentationTestRunner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //作用是构建类型，在Android Gradle中内置了debug和release两个构建类型，差别在于能否在设备上调试和签名不同
    buildTypes {
        release {

            //是否启用Proguard混淆
            minifyEnabled true

            //是否生成一个可供调试的Apk
            debuggable false

            //是否开启开启zipalign优化，提高apk运行效率
            zipAlignEnabled true

            //是否自动清理未使用的资源，默认为false
            shrinkResources true

            //配置默认的签名信息，也是一个ProductFlavor，可直接配置
            signingConfig signingConfigs.release

            //同时配置多个ProGuard配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            minifyEnabled false
            zipAlignEnabled false
            debuggable true
//            signingConfig signingConfigs.release

            //同时配置多个ProGuard配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    implementation project(path: ':common')
    implementation project(path: ':base')

    //room
    implementation 'androidx.room:room-runtime:' + project.ROOM_VERSION
    annotationProcessor 'androidx.room:room-compiler:' + project.ROOM_VERSION// use kapt for Kotlin
    // optional - RxJava support for Room
    implementation 'androidx.room:room-rxjava2:' + project.ROOM_VERSION

    //RecyclerView
    implementation 'com.android.support:recyclerview-v7:29.0.0'//这里面的28，要与上面ompileSdkVersion 28 的后面数字相同

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:'+project.VIEW_MODEL_LIVE_DATA_VERSION

    //广点通
    //读取libs文件下所有的aar文件
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation 'com.tencent.bugly:crashreport:latest.release'
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
    // 以下为流量分配功能所使用依赖，流量分配功能详情请咨询商务
    // Mintegral SDK
    implementation 'com.mintegral.msdk:videojs:10.1.31'
    implementation 'com.mintegral.msdk:mtgjscommon:10.1.31'
    implementation 'com.mintegral.msdk:playercommon:10.1.31'
    implementation 'com.mintegral.msdk:reward:10.1.31'
    implementation 'com.mintegral.msdk:videocommon:10.1.31'
    implementation 'com.mintegral.msdk:optimizedata:10.1.31'
    implementation 'com.mintegral.msdk:common:10.1.31'
    // 开发者后台创建App勾选APK为YES则加上mtgdownloads依赖
    implementation 'com.mintegral.msdk:mtgdownloads:10.1.31'
    //mtgbid
    implementation 'com.mintegral.msdk:mtgbid:10.1.31'
    implementation files('aars/ks_adsdk-2.2.4.aar')

}
