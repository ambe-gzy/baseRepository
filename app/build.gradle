import com.android.build.gradle.api.BaseVariant

//表明这是一个application
apply plugin: 'com.android.application'
apply plugin: 'walle'
apply from: rootProject.file('quality.gradle')

android {

    //配置签名设置，标记App唯一性、保护App
    signingConfigs {
        release {
            //签名证书中密钥别名
            keyAlias 'android'

            //签名证书中该密钥的密码
            keyPassword '87983367ok'

            //签名证书文件
            storeFile file('../androidSignStore.jks')

            //签名证书文件的密码
            storePassword '87983367ok'
        }
    }

    //编译Android工程的SDK版本
    compileSdkVersion 29

    //用于定义所有的默认配置
    defaultConfig {

        //指定App包名
        applicationId project.APP_PACKAGE_NAME

        //指定sdk最低支持的Android SDK
        minSdkVersion 21

        //指定基于的Android SDK
        targetSdkVersion 29

        //配置Android App 的内部版本
        versionCode Integer.parseInt(project.APP_VERSION_CODE)

        //配置Android App 的版本名称
        versionName project.APP_VERSION_NAME

        //配置单元测试使用的Runner，默认为android.test.InstrumentationTestRunner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //作用是构建类型，在Android Gradle中内置了debug和release两个构建类型，差别在于能否在设备上调试和签名不同
    buildTypes {
        release {

            //是否启用Proguard混淆
            minifyEnabled true

            //是否生成一个可供调试的Apk
            debuggable false

            //是否开启开启zipalign优化，提高apk运行效率
            zipAlignEnabled true

            //是否自动清理未使用的资源，默认为false
            shrinkResources true

            //配置默认的签名信息，也是一个ProductFlavor，可直接配置
            signingConfig signingConfigs.release

            //同时配置多个ProGuard配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            minifyEnabled false
            zipAlignEnabled false
            debuggable true
//            signingConfig signingConfigs.release

            //同时配置多个ProGuard配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8

        targetCompatibility JavaVersion.VERSION_1_8

    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:29.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    implementation project(path: ':common')
    implementation project(path: ':base')
    implementation project(path: 'baichuan')

    //RecyclerView
    implementation 'com.android.support:recyclerview-v7:29.0.0'
//这里面的28，要与上面ompileSdkVersion 28 的后面数字相同

    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:' + project.VIEW_MODEL_LIVE_DATA_VERSION

    //navigationbar
    implementation 'com.ashokvarma.android:bottom-navigation-bar:2.1.0'

    //多渠道包获取渠道号
    implementation 'com.meituan.android.walle:library:1.1.6'

    implementation 'com.android.support:support-v4:29.0.0'
    implementation 'com.android.support:design:29.0.0'

}

walle {
    apkOutputFolder = new File("${project.buildDir}/outputs/channels/${project.APP_VERSION_CODE}")
//    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}-${flavorName}.apk'
    apkFileNameFormat = '${packageName}-${channel}-${buildType}-v${versionName}.apk'
    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
    channelFile = new File("${project.getProjectDir()}/channel")
    //configFile = new File("${project.getProjectDir()}/config.json")
}

// 根据不同的applicationId来配置不同的channelFile／configFile
afterEvaluate {
    project.android.applicationVariants.all { BaseVariant variant ->
        variant.assemble.doFirst {
            if (variant.applicationId.endsWith(".debug")) {

                project.walle.channelFile = new File("${project.getProjectDir()}/channel_debug")
            }
        }
    }
}
